<?php

/**
 * member
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    BestBuddies
 * @subpackage model
 * @author     Anvaya Technologies
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class member extends Basemember
{
    /**
     * Retrives current list of products for the user.
     * @param int category_id Optional, product category.
     * @return array Returns key-value pair array (id=>name) of products.
     */
    public function getProductList($category_id = false)
    {        
        $subscription = member_subscriptionTable::getInstance() 
                            ->createQuery('ms')
                            ->addWhere('member_id = ?', $this->getId())
                            ->addWhere('active = 1')                            
                            ->fetchOne();
        
        
        if($subscription)
        {            
            $product_query = productTable::getInstance()
                        ->createQuery('p')
                        ->select('p.id, p.name')
                        ->innerJoin('p.subscription_product sp')                        
                        ->innerJoin('sp.subscription s')
                        ->innerJoin('s.member_subscription ms')
                        ->addWhere('ms.member_id = ?', $this->getId())
                        ->addWhere('ms.active = 1')                        
                        ->addWhere('p.expired is null or p.expired = 0')
                        //->addWhere('p.price > 0')                        
                        ->orderBy('p.name');
                          
            /*
            $product_query = productTable::getInstance()
                            ->createQuery('p')
                            ->select('p.id, p.name')
                            ->innerJoin('p.subscription_product sp')
                            ->innerJoin('sp.subscription s')
                            ->addWhere('p.category_id <> ?', product_categoryTable::CATEGORY_ITR)
                            ->addWhere('p.expired is null or p.expired = 0')
                            ->addWhere('s.id = ?', $subscription->getSubscriptionId())
                            ->orderBy('p.name');
            */
            if($category_id)
            {
                $product_query->addWhere('p.category_id = ?', $category_id);
            }
            
            $my_services = $product_query
                            ->execute(array(), 'key_value_pair' );        
            
            /* @var $subscription member_subscription */
            if($subscription->getItrProductId())
            {
                $product = productTable::getInstance()
                            ->find($subscription->getItrProductId());
                $my_services[$product->getId()] = $product->getName();
            }
            
            $ordered_query = productTable::getInstance()
                                ->createQuery('p')
                                ->select('p.id, p.name')
                                ->innerJoin('p.order_item sp')                        
                                ->innerJoin('sp.order oo')             
                                ->addWhere('p.expired is null or p.expired = 0')
                                ->addWhere('oo.member_id = ?', $this->getId() )
                                ->addWhere('oo.status = ?', orderTable::ORDER_STATUS_PAID)
                                ->orderBy('p.name');
            if($category_id)
            {
                $ordered_query->addWhere('p.category_id = ?', $category_id);
            }                          
            
            $my_services2 = $ordered_query->execute(array(), 'key_value_pair' );                                      
            
            foreach($my_services2 as $key=>$value)
            {
                $my_services[$key] = $value;
            }
            
            return $my_services;
            
        }
        else
        {
            return array();
        }
    }       
    
    public function getQualifiedName()
    {
        $gender = $this->getGender();
        $title  = "";
        
        if($gender)
        {
            if($gender == 'M')
            {
                $title = "Mr. ";
            }
            else
            {
                if($this->getMarried())
                {
                    $title = "Mrs. ";
                }
                else
                {
                    $title = "Ms. ";
                }
            }            
        }
        
        return $title.$this->getFirstName();
    }
    
    /**
     * 
     * @return member_subscription
     */
    public function getCurrentActiveSubscription()
    {
        $subscription = member_subscriptionTable::getInstance() 
                            ->createQuery('ms')
                            ->addWhere('member_id = ?', $this->getId())
                            ->addWhere('active = 1')                            
                            ->orderBy('ms.start_date desc')
                            ->fetchOne();
        return $subscription;
    }
    
    /**
     * Returns whether the member has spouce registered.
     * @return boolean
     */
    public function isSpouceRegistered()
    {
        return (member_relationTable::getInstance()
                ->createQuery('mr')
                ->addWhere('mr.member1 = ? or mr.member2 = ?', array($this->getId(),$this->getId()) )                
                ->addWhere('mr.relation = ?', member_relationTable::RELATION_TYPE_SPOUCE )
                ->count() > 0);
    }
    
}