<?php

/**
 * Basesite_page
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $title
 * @property integer $parent_page_id
 * @property string $page_content
 * @property string $meta_keywords
 * @property string $meta_description
 * @property integer $status
 * @property integer $display_order
 * @property string $template
 * @property boolean $members_only
 * @property boolean $admin_only
 * @property site_page $ParentPage
 * @property Doctrine_Collection $site_page
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method string              getTitle()            Returns the current record's "title" value
 * @method integer             getParentPageId()     Returns the current record's "parent_page_id" value
 * @method string              getPageContent()      Returns the current record's "page_content" value
 * @method string              getMetaKeywords()     Returns the current record's "meta_keywords" value
 * @method string              getMetaDescription()  Returns the current record's "meta_description" value
 * @method integer             getStatus()           Returns the current record's "status" value
 * @method integer             getDisplayOrder()     Returns the current record's "display_order" value
 * @method string              getTemplate()         Returns the current record's "template" value
 * @method boolean             getMembersOnly()      Returns the current record's "members_only" value
 * @method boolean             getAdminOnly()        Returns the current record's "admin_only" value
 * @method site_page           getParentPage()       Returns the current record's "ParentPage" value
 * @method Doctrine_Collection getSitePage()         Returns the current record's "site_page" collection
 * @method site_page           setId()               Sets the current record's "id" value
 * @method site_page           setTitle()            Sets the current record's "title" value
 * @method site_page           setParentPageId()     Sets the current record's "parent_page_id" value
 * @method site_page           setPageContent()      Sets the current record's "page_content" value
 * @method site_page           setMetaKeywords()     Sets the current record's "meta_keywords" value
 * @method site_page           setMetaDescription()  Sets the current record's "meta_description" value
 * @method site_page           setStatus()           Sets the current record's "status" value
 * @method site_page           setDisplayOrder()     Sets the current record's "display_order" value
 * @method site_page           setTemplate()         Sets the current record's "template" value
 * @method site_page           setMembersOnly()      Sets the current record's "members_only" value
 * @method site_page           setAdminOnly()        Sets the current record's "admin_only" value
 * @method site_page           setParentPage()       Sets the current record's "ParentPage" value
 * @method site_page           setSitePage()         Sets the current record's "site_page" collection
 * 
 * @package    BestBuddies
 * @subpackage model
 * @author     Anvaya Technologies
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Basesite_page extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('site_page');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'size' => 4,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'size' => 255,
             'notnull' => true,
             'length' => 255,
             ));
        $this->hasColumn('parent_page_id', 'integer', 4, array(
             'type' => 'integer',
             'size' => 4,
             'unsigned' => true,
             'notnull' => false,
             'length' => 4,
             ));
        $this->hasColumn('page_content', 'string', 50000, array(
             'type' => 'string',
             'size' => 50000,
             'notnull' => false,
             'length' => 50000,
             ));
        $this->hasColumn('meta_keywords', 'string', 1000, array(
             'type' => 'string',
             'size' => 1000,
             'length' => 1000,
             ));
        $this->hasColumn('meta_description', 'string', 2000, array(
             'type' => 'string',
             'size' => 2000,
             'length' => 2000,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'size' => 1,
             'unsigned' => true,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('display_order', 'integer', 4, array(
             'type' => 'integer',
             'size' => 4,
             'unsigned' => true,
             'length' => 4,
             ));
        $this->hasColumn('template', 'string', 50, array(
             'type' => 'string',
             'size' => 50,
             'notnull' => false,
             'length' => 50,
             ));
        $this->hasColumn('members_only', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             ));
        $this->hasColumn('admin_only', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('site_page as ParentPage', array(
             'local' => 'parent_page_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('site_page', array(
             'local' => 'id',
             'foreign' => 'parent_page_id'));

        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'title',
             ),
             'unique' => true,
             ));
        $this->actAs($sluggable0);
    }
}