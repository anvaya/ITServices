<?php

/**
 * Basesupport_ticket
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property varchar $tracking_no
 * @property integer $member_id
 * @property integer $department_id
 * @property integer $product_id
 * @property varchar $sender_email
 * @property varchar $ticket_subject
 * @property integer $created_by
 * @property date $date_received
 * @property integer $status
 * @property integer $assigned_to
 * @property boolean $billable
 * @property integer $billed_units
 * @property member $member
 * @property sfGuardUser $CreateByUser
 * @property sfGuardUser $AssignedToUser
 * @property product $product
 * @property department $department
 * @property Doctrine_Collection $ticket_comment
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method varchar             getTrackingNo()     Returns the current record's "tracking_no" value
 * @method integer             getMemberId()       Returns the current record's "member_id" value
 * @method integer             getDepartmentId()   Returns the current record's "department_id" value
 * @method integer             getProductId()      Returns the current record's "product_id" value
 * @method varchar             getSenderEmail()    Returns the current record's "sender_email" value
 * @method varchar             getTicketSubject()  Returns the current record's "ticket_subject" value
 * @method integer             getCreatedBy()      Returns the current record's "created_by" value
 * @method date                getDateReceived()   Returns the current record's "date_received" value
 * @method integer             getStatus()         Returns the current record's "status" value
 * @method integer             getAssignedTo()     Returns the current record's "assigned_to" value
 * @method boolean             getBillable()       Returns the current record's "billable" value
 * @method integer             getBilledUnits()    Returns the current record's "billed_units" value
 * @method member              getMember()         Returns the current record's "member" value
 * @method sfGuardUser         getCreateByUser()   Returns the current record's "CreateByUser" value
 * @method sfGuardUser         getAssignedToUser() Returns the current record's "AssignedToUser" value
 * @method product             getProduct()        Returns the current record's "product" value
 * @method department          getDepartment()     Returns the current record's "department" value
 * @method Doctrine_Collection getTicketComment()  Returns the current record's "ticket_comment" collection
 * @method support_ticket      setId()             Sets the current record's "id" value
 * @method support_ticket      setTrackingNo()     Sets the current record's "tracking_no" value
 * @method support_ticket      setMemberId()       Sets the current record's "member_id" value
 * @method support_ticket      setDepartmentId()   Sets the current record's "department_id" value
 * @method support_ticket      setProductId()      Sets the current record's "product_id" value
 * @method support_ticket      setSenderEmail()    Sets the current record's "sender_email" value
 * @method support_ticket      setTicketSubject()  Sets the current record's "ticket_subject" value
 * @method support_ticket      setCreatedBy()      Sets the current record's "created_by" value
 * @method support_ticket      setDateReceived()   Sets the current record's "date_received" value
 * @method support_ticket      setStatus()         Sets the current record's "status" value
 * @method support_ticket      setAssignedTo()     Sets the current record's "assigned_to" value
 * @method support_ticket      setBillable()       Sets the current record's "billable" value
 * @method support_ticket      setBilledUnits()    Sets the current record's "billed_units" value
 * @method support_ticket      setMember()         Sets the current record's "member" value
 * @method support_ticket      setCreateByUser()   Sets the current record's "CreateByUser" value
 * @method support_ticket      setAssignedToUser() Sets the current record's "AssignedToUser" value
 * @method support_ticket      setProduct()        Sets the current record's "product" value
 * @method support_ticket      setDepartment()     Sets the current record's "department" value
 * @method support_ticket      setTicketComment()  Sets the current record's "ticket_comment" collection
 * 
 * @package    BestBuddies
 * @subpackage model
 * @author     Anvaya Technologies
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class Basesupport_ticket extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('support_ticket');
        $this->hasColumn('id', 'integer', 5, array(
             'type' => 'integer',
             'size' => 5,
             'unsigned' => true,
             'primary' => true,
             'autoincrement' => true,
             'length' => 5,
             ));
        $this->hasColumn('tracking_no', 'varchar', 30, array(
             'type' => 'varchar',
             'notnull' => false,
             'unique' => true,
             'length' => 30,
             ));
        $this->hasColumn('member_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             'unsigned' => true,
             ));
        $this->hasColumn('department_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             'unsigned' => true,
             ));
        $this->hasColumn('product_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             'unsigned' => true,
             ));
        $this->hasColumn('sender_email', 'varchar', 100, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 100,
             ));
        $this->hasColumn('ticket_subject', 'varchar', 255, array(
             'type' => 'varchar',
             'notnull' => false,
             'length' => 255,
             ));
        $this->hasColumn('created_by', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('date_received', 'date', null, array(
             'type' => 'date',
             'notnull' => false,
             ));
        $this->hasColumn('status', 'integer', 1, array(
             'type' => 'integer',
             'size' => 1,
             'notnull' => false,
             'default' => 0,
             'length' => 1,
             ));
        $this->hasColumn('assigned_to', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('billable', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => false,
             ));
        $this->hasColumn('billed_units', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));


        $this->index('status_idx', array(
             'fields' => 
             array(
              0 => 'status',
             ),
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('member', array(
             'local' => 'member_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('sfGuardUser as CreateByUser', array(
             'local' => 'created_by',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('sfGuardUser as AssignedToUser', array(
             'local' => 'assigned_to',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('product', array(
             'local' => 'product_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasOne('department', array(
             'local' => 'department_id',
             'foreign' => 'id',
             'onDelete' => 'SET NULL',
             'onUpdate' => 'CASCADE'));

        $this->hasMany('ticket_comment', array(
             'local' => 'id',
             'foreign' => 'ticket_id'));
    }
}